CONSTANT CMD_LNG, 06
CONSTANT ARG_LNG, 08
CONSTANT CMD_OK, 55
CONSTANT CMD_ER, AA

; INPUT

CONSTANT sTickRead31_24Port, 03
CONSTANT sTickRead23_16Port, 04
CONSTANT sTickRead15_08Port, 05
CONSTANT sTickRead07_00Port, 06

; OUTPUT
CONSTANT cTxUARTDataPort, 01
CONSTANT cDAC1_07_00Port, 03
CONSTANT cDAC1_15_08Port, 04

CONSTANT cDAC0_31_24Port, 08
CONSTANT cDAC0_23_16Port, 07
CONSTANT cDAC0_15_08Port, 06
CONSTANT cDAC0_07_00Port, 05

CONSTANT cAudioSourcePort, 09

;-----------------------------------------
; EACH commands needs always content of 15 characters:
; 
; - two characters of the peripheral name e.g. D1 (DAC1)
; - underscore delimiter '_' = 0x5F
; - two characters of the action name e.g. SI (Set Voltage)
; - underscore delimiter '_' = 0x5F
; - eight characters of the argument e.g. 00001111
; - termination of the string by LF (Line Feed) = 0x0A 
;
; D1_SV_XXXX0123 -> applicable D1_SV_00009999 : D1_SV_00000000
; set DAC1 voltage => 0.067mV * argument (max cca 3000mV)

; D0_SI_X0123456 -> applicable D0_SI_01FFFFFF : D0_SI_00000000
; set DAC0 frequency => 3.57Hz * argument (max 120MHz)

; AU_SR_XXXXXXX1 -> applicable AU_SR_00000001 : AU_SR_00000000

; TC_GT_XXXXXXXX -> no meaningful argument needed, just padding
; get 32-bit tick value which is each 1ms incremented

STRING STCK_GET$, "TC_GT_"
CMD_TCKGET: LOAD&RETURN s6, STCK_GET$

STRING SDA1_STV$, "D1_SV_"
CMD_DA1STV: LOAD&RETURN s6, SDA1_STV$
	  
STRING SDA0_STI$, "D0_SI_"
CMD_DA0STI: LOAD&RETURN s6, SDA0_STI$

STRING SAUD_SRC$, "AU_SR_"
CMD_AUDSRC: LOAD&RETURN s6, SAUD_SRC$

; This function is not intended to be called
; neither anyhow used, but by placing this 
; function here I eliminated weird behaviour
; for calling function CMD_AUDSRC, my theory
; is that there was some conflict with address
; of the last function and other used memspace
; therefore this padding by the CMD_DUMMY makes
; a border between functions and the rest
STRING SDUMMY$, "DUMMY_"
CMD_DUMMY: LOAD&RETURN s6, SDUMMY$

;------------------------------------------

STRING SRDA1_STV$, "DA1:V-set"
RSP_DA1STV: CALL UART_TX_CLEAR

			CALL READ_ARG_15_08
			OUTPUT BUFF_DATA, cDAC1_15_08Port
			CALL READ_ARG_07_00
			OUTPUT BUFF_DATA, cDAC1_07_00Port
			
			OUTPUTK SRDA1_STV$, 1
		    OUTPUTK LF, 1
			
			RETURN
			
STRING SRDA0_SET$, "DA0:I-set"
RSP_DA0STI: CALL UART_TX_CLEAR

			CALL READ_ARG_31_24
			OUTPUT BUFF_DATA, cDAC0_31_24Port
			CALL READ_ARG_23_16
			OUTPUT BUFF_DATA, cDAC0_23_16Port
			CALL READ_ARG_15_08
			OUTPUT BUFF_DATA, cDAC0_15_08Port
			CALL READ_ARG_07_00
			OUTPUT BUFF_DATA, cDAC0_07_00Port
			
			OUTPUTK SRDA0_SET$, 1
		    OUTPUTK LF, 1
			
			RETURN
			
STRING SRAUD_VLM$, "AUD:S-set"
RSP_AUDSRC: CALL UART_TX_CLEAR
			OUTPUTK SRAUD_VLM$, 1
		    OUTPUTK LF, 1
			CALL READ_ARG_07_00
			OUTPUT BUFF_DATA, cAudioSourcePort
			RETURN
			
STRING SRTCK_GET$, "TCK:"
RSP_TCKGET: CALL UART_TX_CLEAR

			OUTPUTK SRTCK_GET$, 1

			INPUT BUFF_DATA, sTickRead31_24Port
			OUTPUT BUFF_DATA, cTxUARTDataPort
			INPUT BUFF_DATA, sTickRead23_16Port
			OUTPUT BUFF_DATA, cTxUARTDataPort
			INPUT BUFF_DATA, sTickRead15_08Port
			OUTPUT BUFF_DATA, cTxUARTDataPort
			INPUT BUFF_DATA, sTickRead07_00Port
			OUTPUT BUFF_DATA, cTxUARTDataPort

			OUTPUTK LF, 1
			
			RETURN

STRING SERR$, "CmdArgEr!"
RSP_ERR:    CALL UART_TX_CLEAR
			OUTPUTK SERR$, 1
		    OUTPUTK LF, 1
			RETURN	
;------------------------------------------
   
;--------------------------------------------------

 
CHECK_RECEIVED:	LOAD s9, BUFF_HEAD

				LOAD s3, CMD_TCKGET'upper
				LOAD s2, CMD_TCKGET'lower
				LOAD s1, RSP_TCKGET'upper
				LOAD s0, RSP_TCKGET'lower
				CALL COMPARE_CMD
				
				LOAD BUFF_HEAD, s9

				LOAD s3, CMD_DA1STV'upper
				LOAD s2, CMD_DA1STV'lower
				LOAD s1, RSP_DA1STV'upper
				LOAD s0, RSP_DA1STV'lower	
				CALL COMPARE_CMD
				
				LOAD BUFF_HEAD, s9
				
				LOAD s3, CMD_DA0STI'upper
				LOAD s2, CMD_DA0STI'lower
				LOAD s1, RSP_DA0STI'upper
				LOAD s0, RSP_DA0STI'lower
				CALL COMPARE_CMD
				
				LOAD BUFF_HEAD, s9
				
				LOAD s3, CMD_AUDSRC'upper
				LOAD s2, CMD_AUDSRC'lower
				LOAD s1, RSP_AUDSRC'upper
				LOAD s0, RSP_AUDSRC'lower
				CALL COMPARE_CMD
										
				CALL INIT_BUFF
				RETURN				
			
;--------------------------------------------------


COMPARE_CMD:  LOAD s4, CMD_LNG ; length of string for loop length
cycle:		  CALL@ (s3, s2) ; call character returning routine
			  OR s4, 00 ; return Z context to s4 - end of loop ?
			  JUMP Z, endofstr ; if yes jump to check last character
			  CALL READ_BUFF
			  COMPARE s6, BUFF_DATA ; no, so check if passed data meet the tested
			  RETURN NZ ; if not, immediately leave
			  SUB s4, 01 ; if yes, not decrement loop lifetime
			  ADD s2, 01 ; increment routines address to get/test another char
			  JUMP cycle ; repeat for another character
			  
endofstr:	  LOAD s4, BUFF_TAIL
			  SUB s4, BUFF_HEAD
			  SUB s4, 01
			  COMPARE s4, ARG_LNG ; LF as the last ?
			  JUMP Z, match ; 1 or 0 returned in s0
			  CALL RSP_ERR
			  RETURN
			  
match:		  CALL GET_ARG  
			  CALL@ (s1, s0)
			  RETURN
			  
;--------------------------------------------------

GET_ARG:	  LOAD s4, ADRARG_31_24
iter32b:	  CALL READ_BUFF
			  CALL ASCII2HEX
			  LOAD s5, BUFF_DATA
			  SL0 s5
			  SL0 s5
			  SL0 s5
			  SL0 s5  
			  CALL READ_BUFF
			  CALL ASCII2HEX
			  ADD s5, BUFF_DATA
			  
			  STORE s5, (s4)	  
			  ADD s4, 01
			  
			  JUMP NC, iter32b
			  CALL PRINT_ARG		  
			  RETURN Z
			  
ASCII2HEX:    SUB BUFF_DATA, 30
			  COMPARE BUFF_DATA, LF
			  RETURN C
			  SUB BUFF_DATA, 07
			  COMPARE BUFF_DATA, 10
			  RETURN C
			  SUB BUFF_DATA, 20
			  RETURN

			  
PRINT_ARG:    CALL READ_ARG_31_24
			  OUTPUT BUFF_DATA, cTxUARTDataPort
			  CALL READ_ARG_23_16
			  OUTPUT BUFF_DATA, cTxUARTDataPort
			  CALL READ_ARG_15_08
			  OUTPUT BUFF_DATA, cTxUARTDataPort
			  CALL READ_ARG_07_00
			  OUTPUT BUFF_DATA, cTxUARTDataPort
			  OUTPUTK LF, 1
			  RETURN